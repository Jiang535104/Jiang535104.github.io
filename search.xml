<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>10.18-Vue笔记</title>
      <link href="/2021/10/18/10.18-vue-bi-ji/"/>
      <url>/2021/10/18/10.18-vue-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Vue中的两种数据绑定方式"><a href="#一、Vue中的两种数据绑定方式" class="headerlink" title="一、Vue中的两种数据绑定方式"></a>一、Vue中的两种数据绑定方式</h1><h2 id="1、单向绑定（v-bind）"><a href="#1、单向绑定（v-bind）" class="headerlink" title="1、单向绑定（v-bind）"></a>1、单向绑定（v-bind）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"name"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>数据只能从data流向页面</p><p>简写为   ：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"name"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2、双向绑定（v-model）"><a href="#2、双向绑定（v-model）" class="headerlink" title="2、双向绑定（v-model）"></a>2、双向绑定（v-model）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>：<span class="attr">value</span>=<span class="string">"name"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>数据流不仅能从data流向页面，还可以从页面流向data</p><p>简写为  v-model 因为v-model默认收集的就是value值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>双向绑定一般都应用在表单类元素上（如：input、select等）</li></ul><h1 id="二、Vue模板语法两大类"><a href="#二、Vue模板语法两大类" class="headerlink" title="二、Vue模板语法两大类"></a>二、Vue模板语法两大类</h1><h2 id="1、插值语法："><a href="#1、插值语法：" class="headerlink" title="1、插值语法："></a>1、插值语法：</h2><ul><li>用于解析标签体内容</li><li>写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</li></ul><h2 id="2、指令语法"><a href="#2、指令语法" class="headerlink" title="2、指令语法"></a>2、指令语法</h2><ul><li><p>用于解析标签（包括：标签属性、标签体内容、绑定事件…）</p></li><li><p>举例：v-bind：href=“xxx”</p></li></ul><h1 id="三、data与el的两种写法"><a href="#三、data与el的两种写法" class="headerlink" title="三、data与el的两种写法"></a>三、data与el的两种写法</h1><p>![image-20221021162004969](10.18 vue笔记/image-20221021162004969.png)</p><p>（以后补）</p><h1 id="四、MVVM模型"><a href="#四、MVVM模型" class="headerlink" title="四、MVVM模型"></a>四、MVVM模型</h1><ol><li>M：模型（Model） data中的数据</li><li>V：视图 （View） 模板代码</li><li>VM： 视图模型（ViewModel）： Vue实例</li></ol><ul><li>data中的所有属性都出现在了vm身上</li><li>vm身上所有属性 及 Vue原型上所有属性，在Vue模板都可以直接使用</li></ul><h1 id="五、数据代理"><a href="#五、数据代理" class="headerlink" title="五、数据代理"></a>五、数据代理</h1><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读、写）</p><ul><li>Vue中的数据代理：</li></ul><p>​               通过vm对象来代理data对象中属性的操作</p><ul><li>Vue中数据代理的好处：</li></ul><p>​                更加方便的操作data中的数据</p><ul><li>基本原理</li></ul><p>​                通过Object.defineProperty()把data对象中所有的属性都添加到vm上。</p><p>​                为每一个添加到vm上的属性，都指定一个getter/setter</p><p>​                 在getter/setter内部去操作（读/写）data中属性的操作</p><h1 id="六、事件的基本使用"><a href="#六、事件的基本使用" class="headerlink" title="六、事件的基本使用"></a>六、事件的基本使用</h1><ol><li>使用v-on:xxx 或@xxx 绑定事件，其中xxx是事件名；</li><li>事件的回调需要配置在methods对象中，最终会在vm上；</li><li>methods中配置的函数，不要使用箭头函数！否则this就不是vm了（window）</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象</li><li>@click=“demo” 和 @click=“demo（$event）”  效果一致，但后者可以传参</li></ol><h1 id="七、Vue中的事件修饰符"><a href="#七、Vue中的事件修饰符" class="headerlink" title="七、Vue中的事件修饰符"></a>七、Vue中的事件修饰符</h1><ol><li><p>prevent：阻止默认事件（常用）；</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"ShowInfo"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">                <span class="title class_">ShowInfo</span>(){</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">'同学你好'</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure><p>效果：只显示不跳转</p></li><li><p>stop：阻止事件冒泡（常用）；</p></li><li><p>once：事件只触发一次（常用）；</p></li><li><p>capture：使用事件的捕获模式</p></li><li><p>self：只有event.target是当前操作的元素才触发事件；</p></li><li><p>passive：事件的默许行为立即执行，无需等待事件回调执行完毕</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用方法总结</title>
      <link href="/2021/09/18/typora-shi-yong-fang-fa-zong-jie/"/>
      <url>/2021/09/18/typora-shi-yong-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora使用方法总结"><a href="#Typora使用方法总结" class="headerlink" title="Typora使用方法总结"></a>Typora使用方法总结</h1><h2 id="一、基础方法"><a href="#一、基础方法" class="headerlink" title="一、基础方法"></a>一、基础方法</h2><h2 id="1-1-标题"><a href="#1-1-标题" class="headerlink" title="1.1 标题"></a>1.1 标题</h2><ul><li><p>使用快捷键Ctrl+1（2，3，4，5，6）表示相对应的标题。</p></li><li><p>Ctrl+0表示段落</p></li><li><p>菜单栏段落选项下可以查看</p></li></ul><h2 id="1-2-字体"><a href="#1-2-字体" class="headerlink" title="1.2 字体"></a>1.2 字体</h2><ul><li>快捷键Ctrl+I来表示  <em>斜体文本</em></li><li>快捷键Ctrl+B来表示 <strong>粗体文本</strong></li></ul><h2 id="1-3-线"><a href="#1-3-线" class="headerlink" title="1.3 线"></a>1.3 线</h2><ul><li><p>以使用<strong>三个及以上</strong>的 <code>+</code> 来表示一条分割线：</p><hr></li><li><p><code>Alt+Shift+5</code>来表示 <del>删除文本</del></p></li><li><p>快捷键<code>Ctrl+U</code>来下划线 <u>下划线文本</u></p></li></ul><h2 id="1-4-列表"><a href="#1-4-列表" class="headerlink" title="1.4 列表"></a>1.4 列表</h2><ul><li>可以使用 * 标记符号来表示<strong>无序列表</strong>，注意要在标记符号后<strong>添加一个空格</strong></li><li>可以使用<strong>数字加上<code>.</code>再加上空格</strong>来表示<strong>有序列表</strong></li></ul><h2 id="1-5-区块"><a href="#1-5-区块" class="headerlink" title="1.5 区块"></a>1.5 区块</h2><ul><li>可以使用&gt;加空格来表示区块</li></ul><blockquote><p>区块</p></blockquote><h2 id="1-6-代码"><a href="#1-6-代码" class="headerlink" title="1.6 代码"></a>1.6 代码</h2><ul><li>如果是一行代码，可以使用段内代码块来表示，用一对 **`**（数字1旁边的符号）括住代码。</li><li>如果是代码段,可以使用<strong>三个 ` 加Enter+编程语言</strong>来表示</li></ul><h2 id="1-7-链接"><a href="#1-7-链接" class="headerlink" title="1.7 链接"></a>1.7 链接</h2><ul><li><p>链接的使用方式有两种语法，如下</p><blockquote><p>[]</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客中遇到的问题</title>
      <link href="/2021/09/17/da-jian-bo-ke-zhong-yu-dao-de-wen-ti/"/>
      <url>/2021/09/17/da-jian-bo-ke-zhong-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建博客中遇到的问题"><a href="#搭建博客中遇到的问题" class="headerlink" title="搭建博客中遇到的问题"></a>搭建博客中遇到的问题</h1><h2 id="1-执行-hexo-s-命令时出现如下报错"><a href="#1-执行-hexo-s-命令时出现如下报错" class="headerlink" title="1.执行 hexo s 命令时出现如下报错"></a>1.执行 hexo s 命令时出现如下报错</h2><p><img src="/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/mmexport1663120418600.jpg" alt="mmexport1663120418600"></p><p><strong>原因：</strong>nodejs版本过低</p><p><strong>解决方法：</strong>更换新版本</p><h2 id="2-node-js安装后执行npm报错"><a href="#2-node-js安装后执行npm报错" class="headerlink" title="2.node.js安装后执行npm报错"></a>2.node.js安装后执行npm报错</h2><blockquote><p>npm WARN config global <code>–global</code>, <code>–local</code> are deprecated. Use <code>–location=global</code> instead.</p></blockquote><p><strong>解决方案：</strong></p><p>打开nodejs文件夹</p><p>找到npm.cmd 将 prefix-g 改为 prefix –location=global</p><h2 id="3-输入-hexo-d-后-报错"><a href="#3-输入-hexo-d-后-报错" class="headerlink" title="3.输入 hexo d 后 报错"></a>3.输入 hexo d 后 报错</h2><p>出现 ： </p><blockquote><p>*** Please tell me who you are.</p><p>Run</p><p>git config –global user.email “<a href="mailto:you@example.com">you@example.com</a>“<br>git config –global user.name “Your Name”</p><p>to set your account’s default identity.<br>Omit –global to set the identity only in this repository.</p><p>fatal: unable to auto-detect email address (got ‘xx@xxxxxx.(none)’)<br>FATAL {<br>err: Error: Spawn failed<br>at ChildProcess.<anonymous> (E:\ServerTool\Blog\node_modules\hexo-util\lib<br>\spawn.js:51:21)<br>at ChildProcess.emit (node:events:527:28)<br>at ChildProcess.cp.emit (E:\ServerTool\Blog\node_modules\cross-spawn\lib\e<br>noent.js:34:29)<br>at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12<br>) {<br>code: 128<br>}<br>} Something’s wrong. Maybe you can find the solution here: %s <a href="https://hexo.io/do">https://hexo.io/do</a><br>cs/troubleshooting.html</anonymous></p></blockquote><p><strong>解决方法：</strong></p><p>首先第一步进入你的/Blog文件夹找到并删除.deploy_git文件夹;<br>然后在Git bash里依次输入:</p><blockquote><p>git config –global core.autocrlf false<br>hexo clean<br>hexo g<br>hexo d</p></blockquote><p>如果还不行的话，可能是账户认证出现了问题，需要你输入：</p><blockquote><p>git config –global user.email “邮箱”<br>git config –global user.name “用户名”</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
